	/********************************** Comandos ********************************/
	// fg@ dataset
	// fg? services
	// fg# form
	// fg* workflow
	// fg- scripts/components do style-fluig
	// fg$ jquery
	// fg& Javascript Vanilla
	{
		"Console Log": {
			"prefix": "clog",
			"body": "console.log('$1', $2)",
			"description": "Log output to console"
		},
		/**********************************DATA SET********************************/
		"Criar Conecção JDBC": {
			"prefix": "fg@createDatasetConectionJDBC(CREATE DATASET)",
			"body": [
				"function createDataset(fields, constraints, sortFields) {",
				"\tlog.info('#### DS SQL ####');",
				"\tvar newDataset = DatasetBuilder.newDataset();",
				"\tvar ic         = new javax.naming.InitialContext();",
				"\tvar created    = false;",
				"\tvar query      = '';",
				"\tvar filtro     = '';",
				"\tvar banco      = '';",
				"\tvar zoom       = 0;",
				"\tvar dataSource = 'jdbc/';",
				"\tvar servico    = 'FluigDS';",
				"\tif(constraints != null) {",
				"\t\tif(constraints.length > 0) {",
				"\t\t\tfor (var i = 0; i < constraints.length; i++) {",
				"\t\t\t\tif (constraints[i].fieldName == 'select') {",
				"\t\t\t\t\tquery = constraints[i].initialValue;",
				"\t\t\t\t} else if (constraints[i].fieldName == 'servico') {",
				"\t\t\t\t\tservico = constraints[i].initialValue;",
				"\t\t\t\t} else if (constraints[i].fieldName == 'zoom') { // quando for campo ZOOM no formulário",
				"\t\t\t\t\tzoom = constraints[i].initialValue;",
				"\t\t\t\t} else if (constraints[i].fieldName == 'sqlLimit') {",
				"\t\t\t\t} else {",
				"\t\t\t\t\tvar campo = constraints[i].fieldName;",
				"\t\t\t\t\tvar valor = constraints[i].initialValue; ",
				"\t\t\t\t\tfiltro += 'AND'  + campo + \" 'LIKE % + valor + %'\"; ",
				"\t\t\t\t}",
				"\t\t\t}",
				"\t\t}",
				"\t}",
				"\t//query = query.toUpperCase();",
				"\tif(query.indexOf('WHERE')==-1) { // NÃO ACHOU",
				"\t\tfiltro = ' WHERE 1=1'  + filtro;",
				"\t} else { // ACHOU",
				"\t}",
				"\tquery = query + filtro;",
				"\tif (zoom == 1) {",
				"\t\t//query = decodeURIComponent(query);",
				"\t\tquery = query.replace('+%27', \" '\").replace('%27+', \"'\");",
				"\t}",
				"\t//query = query.toUpperCase();",
				"\tlog.info('#### QUERY ####');",
				"\tlog.info(query);",
				"\tvar ds = ic.lookup(dataSource + '/' + servico);",
				"\ttry {",
				"\t\tvar conn = ds.getConnection();",
				"\t\tvar stmt = conn.createStatement();",
				"\t\tvar rs = stmt.executeQuery(query);",
				"\t\tvar columnCount = rs.getMetaData().getColumnCount();",
				"\t\twhile(rs.next()) {",
				"\t\t\tif(!created) {",
				"\t\t\t\tfor(var i = 1; i <= columnCount; i++) {",
				"\t\t\t\t\tnewDataset.addColumn(rs.getMetaData().getColumnName(i));",
				"\t\t\t}",
				"\t\t\t\tcreated = true;",
				"\t\t\t}",
				"\t\t\tvar Arr = new Array();",
				"\t\t\t\tfor(var i = 1; i <= columnCount; i++) {",
				"\t\t\t\t\tvar obj = rs.getObject(rs.getMetaData().getColumnName(i));",
				"\t\t\t\tif(null!=obj) {",
				"\t\t\t\t\tArr[i-1] = rs.getObject(rs.getMetaData().getColumnName(i)).toString();",
				"\t\t\t\t} else {",
				"\t\t\tArr[i-1] = 'null';",
				"\t\t\t\t}",
				"\t\t\t}",
				"\t\t\t\tnewDataset.addRow(Arr);",
				"\t\t\t}",
				"\t} catch(e) {",
				"\t\tlog.info('ERRO ==============>'  + e.message);",
				"\t\tnewDataset.addColumn('ERRO');",
				"\t\tnewDataset.addRow(new Array(e.message));",
				"\t} finally {",
				"\tif(stmt != null) stmt.close();",
				"\t\tif(conn != null) conn.close();  ",
				"\t}",
				"\treturn newDataset;",
				"}"
			],
			"description": "Criação de dataset para coneção com serviços jdbc - Fluig"
		},
		"Criar novo Dataset": {
			"prefix": "fg@createds",
			"body": [
				"try{",
				"\tvar dataset = DatasetBuilder.newDataset();",
				"\tdataset.addColumn('$NOME_DA_COLUNA');",
				"\tdataset.addRow([$VALOR_LINHA]);",
				"",
				"\treturn dataset;",
				"}catch(erro){",
				"\tvar dataset = DatasetBuilder.newDataset();",
				"\tdataset.addColumn('Erro');",
				"\tdataset.addRow([erro]);",
				"\treturn dataset;",
				"}",
			],
			"description": "Cria uma estrutura de um novo dataset"
		},
		"Criar Constraint": {
			"prefix": "fg@createconstraint",
			"body": [
				"var ${constraint} = DatasetFactory.createConstraint('${indiceConstraint}', '${valorInicial}', '${valorfinal}', ConstraintType.MUST);"
			],
			"description": "Cria constraint"
		},
		"Adicionar Coluna ao Dataset": {
			"prefix": "fg@Col",
			"body": [
				"${dataset}.addColumn('${nomeColuna}')"
			],
			"description": "Adicionar colunas ao dataset"
		},
		"Pegar Valor do dataset": {
			"prefix": "fg@gval",
			"body": [
				"${dataset}.getValue(${i}, '${nomeColuna}');"
			],
			"description": "Pegar valor de uma posição x,y do dataset"
		},
		"Adicionar Linha ao Dataset": {
			"prefix": "fg@row",
			"body": [
				"\tdataset.addRow(",
				"\t\tnew Array(",
				"\t\t\t${indice}",
				"\t\t)",
				"\t)"
			],
			"description": "Adicionar Campos do dataset"
		},
		"Retornar dataset": {
			"prefix": "fg@getds",
			"body": "var $dataset = DatasetFactory.getDataset('$DATASET', $null, $null, $null);",
			"description": "Cria a estrutura de consulta de um dataset"
		},
		/**********************************FLUIG API********************************/
		"Retorna login do usuário logado": {
			"prefix": "fg?getLogin",
			"body": [
				"var ${login} = fluigAPI.getUserService().getCurrent().getCode();"
			],
			"description": "Retorna login do usuário logado"
		},
		"Retorna nomedo usuário logado": {
			"prefix": "fg?getNome",
			"body": [
				"var ${nome} = fluigAPI.getUserService().getCurrent().getFullName();"
			],
			"description": "Retorna nomedo usuário logado"
		},
		/**********************************FORM********************************/
		"DisplayFields Set Value": {
			"prefix": "fg#setValue",
			"body": [
				"form.setValue('${indice1}', '${indice2}');"
			],
			"description": "DisplayFields Set Value"
		},
		"DisplayFields Get Value": {
			"prefix": "fg#getValue",
			"body": [
				"var ${campo} = form.getValue('${indice}');"
			],
			"description": "DisplayFields Get Value"
		},
		"DisplayFields SetVisibleById": {
			"prefix": "fg#setVisibleById",
			"body": [
				"form.setVisibleById('${indice}', ${true});"
			],
			"description": "DisplayFields SetVisibleById"
		},
		"Retorna número de filhos da tabela Pai Filho": {
			"prefix": "fg#getIndexes",
			"body": [
				"var $index = form.getChildrenIndexes(\"$1\");"
			],
			"description": "Retorna número de filhos da tabela Pai Filho"
		},
		"Adicionar hora atual em um campo": {
			"prefix": "fg#dateNow",
			"body": [
				"customHTML.append(\"<script>\");",
				"customHTML.append(\"var data = new Date();\");",
				"customHTML.append(\"var dataHoje = data.toLocaleString();\");",
				"customHTML.append(\"$('#$data_hora').val(dataHoje);\");",
				"customHTML.append(\"</script>\");"
			],
			"description": "Adiciona a data atual a um campos do formulario"
		},
		"Atividade atual": {
			"prefix": "fg#ativAtual",
			"body": [
				"var ativAtual = getValue('WKNumState');"
			],
			"description": "Adiciona uma variavel que guarda a atividade atual do processo"
		},
		"Numero da Solicitação Aberta": {
			"prefix": "fg#process",
			"body": [
				"var numProcesso = getValue('WKNumProces')"
			],
			"description": "Adiciona uma variavel que guarda o numero da solicitação aberta"
		},
		"Injeção de Script no Formulário": {
			"prefix": "fg#append",
			"body": [
				"customHTML.append('<script>${code}</script>');"
			],
			"description": "Adiciona script no formulário"
		},
		/**********************************WORKFLOW********************************/
		"Retorna número da atividade": {
			"prefix": "fg*getAtividade",
			"body": [
				"var atividade = getValue(\"WKNumState\");"
			],
			"description": "Retorna número da atividade"
		},
		"Retorna número do processo": {
			"prefix": "fg*getProcesso",
			"body": [
				"var processo = getValue('WKNumProces');"
			],
			"description": "Retorna número do processo"
		},
		"Pega Valor de um campo em eventos de workflow": {
			"prefix": "fg*getCard",
			"body": "hAPI.getCardValue(\"$1\");",
			"description": "Pega Valor de um campo em eventos de workflow"
		},
		"Seta Valor em um campo em eventos de workflow": {
			"prefix": "fg*setCard",
			"body": "hAPI.setCardValue(\"$1\", \"$2\");",
			"description": "Seta Valor em um campo em eventos de workflow"
		},
		"Log.info Victor": {
			"prefix": "info",
			"body": "log.info('${info}');",
			"description": "Log.info"
		},
		"Log.dir": {
			"prefix": "dir",
			"body": "log.dir('${obj}');",
			"description": "Log.dir"
		},
		/**********************************FLUIGC********************************/
		"Loading Show": {
			"prefix": "fg-loading-show",
			"body": "FLUIGC.loading(window).show()",
			"description": "Fluig Loading Show"
		},
		"Loading Hide": {
			"prefix": "fg-loading-hide",
			"body": "FLUIGC.loading(window).hide()",
			"description": "Fluig Loading Hide"
		},
		"Switcher": {
			"prefix": "fg-sw",
			"body": [
				"FLUIGC.switcher.init('#${campoSwitch}');"
			],
			"description": "Fluig switcher"
		},
		"Swicher onChange event": {
			"prefix": "fg-swchange",
			"body": [
				"FLUIGC.switcher.onChange(${seletor}, function(event, state){",
				"\t${code}",
				"})"
			],
			"description": "Fluig Switcher event change"
		},
		"Fluig Calendario": {
			"prefix": "fg-initcalendar",
			"body": [
				"FLUIGC.calendar(${seletor}, {",
				"\tpickDate: true,",
				"\tpickTime: true,",
				"})"
			],
			"description": "Inicia Calendario"
		},
		"Fluig Toast": {
			"prefix": "fg-toast",
			"body": [
				"FLUIGC.toast({",
				"\ttitle: '${title}: ',",
				"\tmessage: '${menssagem}',",
				"\ttype: '${success}'",
				"});"
			],
			"description": "Inicia Toast"
		},
		/**********************************JQUERY********************************/
		"Document ready JQUERY": {
			"prefix": "fg$ready",
			"body": [
				"$('document').ready(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Utilização do codigo $('document').ready(function(){code}) JQUERY"
		},
		"Evento click JQUERY": {
			"prefix": "fg$click",
			"body": [
				"$(${seletor}).on('click', function(event){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento Click JQUERY"
		},
		"Remoção de Eventos JQUERY": {
			"prefix": "fg$removeEvent",
			"body": [
				"$(${seletor}).off(${ElementoaRemover})"
			],
			"description": "Remoção de Evento JQUERY"
		},
		"Evento de perca de focu JQUERY": {
			"prefix": "fg$blur",
			"body": [
				"$(${seletor}).blur(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento blur JQUERY"
		},
		"Evento keyup JQUERY": {
			"prefix": "fg$keyup",
			"body": [
				"$(${seletor}).keyup(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento keyup JQUERY"
		},
		"Evento keydown JQUERY": {
			"prefix": "fg$keydown",
			"body": [
				"$(${seletor}).keydown(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento keydown JQUERY"
		},
		"Evento mouseenter JQUERY": {
			"prefix": "fg$mouseenter",
			"body": [
				"$(${seletor}).mouseenter(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mouseenter JQUERY"
		},
		"Evento mousedown JQUERY": {
			"prefix": "fg$mousedown",
			"body": [
				"$(${seletor}).mousedown(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mousedown JQUERY"
		},
		"Evento mousemove JQUERY": {
			"prefix": "fg$mousemove",
			"body": [
				"$(${seletor}).mousemove(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mousemove JQUERY"
		},
		"Evento mouseup JQUERY": {
			"prefix": "fg$mouseup",
			"body": [
				"$(${seletor}).mouseup(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mouseup JQUERY"
		},
		"Evento mouseout JQUERY": {
			"prefix": "fg$mouseout",
			"body": [
				"$(${seletor}).mouseout(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mouseout JQUERY"
		},
		"Evento mouseover JQUERY": {
			"prefix": "fg$mouseover",
			"body": [
				"$(${seletor}).mouseover(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mouseout JQUERY"
		},
		"Evento mouseleave JQUERY": {
			"prefix": "fg$mouseleave",
			"body": [
				"$(${seletor}).mouseleave(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento mouseleave JQUERY"
		},
		"Evento focus JQUERY": {
			"prefix": "fg$focus",
			"body": [
				"$(${seletor}).focus(function(){",
				" \t\t${code}",
				"})"
			],
			"description": "Evento focus JQUERY"
		},
		"Evento hover JQUERY": {
			"prefix": "fg$hover",
			"body": [
				"$(${seletor).hover(function(){",
				"\t\t${code}",
				"})"
			],
			"description": "Evento hover JQUERY"
		},
		"Each JQUERY": {
			"prefix": "fg$each",
			"body": [
				"$.each(${selector}, function(key,value){",
				"\t\t${code}",
				"})"
			],
			"description": "Função each JQUERY"
		},
		"$.Ajax Request": {
			"prefix": "fg$ajax",
			"body": [
				" $.ajax({",
				"\ttype: 'get',",
				"\tcontentType: 'application/json; charset=utf-8',",
				"\turl: ${url},",
				"\tdataType: 'json',",
				"success: function(data){",
				"\tconsole.log(data);",
				"},",
				"error: function (error) {",
				"\tconsole.error('Error: ',error);",
				"}",
				"});",
			],
			"description": "Requisição feita com ajax"
		},
		/********************************** Javascript Vanilla ********************************/
		"Fetch request": {
			"prefix": "fg&fetch",
			"body": [
				"fetch(${url}, {",
				"\tmethod: 'GET',",
				"\tmode: 'basic', // pode ser cors ou basic(default)",
				"\theaders: new Headers({",
				"\t'Content-Type': 'application/json'",
				"})",
				" })",
				".then(res => res.json())",
				".then(json => console.log(json))",
				".catch(function(err){ ",
				"\tconsole.error('Failed retrieving information', err);",
				"});",
			],
			"description": "Fetch request"
		},
		"Document ready Javascript Vanilla": {
			"prefix": "fg&ready",
			"body": [
				"document.addEventListener('DOMContentLoaded', function() {",
				"\t\t${code}",
				"})"
			],
			"description": "Document ready vanilla"
		},
		"Seletor Javascript Vanilla": {
			"prefix": "fg&selector",
			"body": [
				"document.querySelector(`${elemento}`)"
			],
			"description": "Document selector"
		},
	}